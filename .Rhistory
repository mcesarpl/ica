library(AppliedPredictiveModeling)
data(solubility)
library(lattice)
indx <- createFolds(solTrainY, returnTrain = TRUE, k = 5)
ctrl <- trainControl(method = "cv", index = indx, number = 5)
library(caret)
indx <- createFolds(solTrainY, returnTrain = TRUE, k = 5)
ctrl <- trainControl(method = "cv", index = indx, number = 5)
lmTune0 <- train(x = solTrainXtrans, y = solTrainY,
method = "lm",
trControl = ctrl)
lmTune0
tooHigh <- findCorrelation(cor(solTrainXtrans), .9)
trainXfiltered <- solTrainXtrans[, -tooHigh]
testXfiltered  <-  solTestXtrans[, -tooHigh]
lmTune <- train(x = trainXfiltered, y = solTrainY,
method = "lm",
trControl = ctrl)
lmTune
testResults <- data.frame(obs = solTestY,
Linear_Regression = predict(lmTune, testXfiltered))
testResults
library(AppliedPredictiveModeling)
data(solubility)
library(caret)
library(lattice)
set.seed(100)
indx <- createFolds(solTrainY, returnTrain = TRUE)
ctrl <- trainControl(method = "cv", index = indx)
lmTune0 <- train(x = solTrainXtrans, y = solTrainY,
method = "lm",
trControl = ctrl)
lmTune0
tooHigh <- findCorrelation(cor(solTrainXtrans), .9)
trainXfiltered <- solTrainXtrans[, -tooHigh]
testXfiltered  <-  solTestXtrans[, -tooHigh]
set.seed(100)
lmTune <- train(x = trainXfiltered, y = solTrainY,
method = "lm",
trControl = ctrl)
testResults <- data.frame(obs = solTestY,
Linear_Regression = predict(lmTune, testXfiltered))
testResults
pls_ = train(x = solTrainTransX, y = solTrainY, method = "pls", trControl = ctrl_folds)
library(AppliedPredictiveModeling)
data(solubility)
library(lattice)
library(e1071)
library(caret)
xyplot(solTrainY ~ solTrainX$MolWeight, type = c("p","g"), ylab = "Solubility", xlab = "Mol Weight")
xyplot(solTrainY ~ solTrainX$SurfaceArea1, type = c("p","g"), ylab = "Solubility", xlab = "Surface Area 1")
bwplot(solTrainY ~ ifelse(solTrainX[,50] == 1, "presence", "absent"),ylab = "Solubility")
#notfps = names(solTrainX)[209:228]
notfps = names(solTrainX)[!grepl("FP", names(solTrainX))]
train_X <- solTrainX[,notfps] + 1
test_X  <-  solTestX[,notfps] + 1
solPP <- preProcess(train_X, method = "BoxCox")
predTrainX <- predict(solPP, train_X)
predTestX <- predict(solPP, test_X)
solTrainTransX <- cbind(solTrainX[,grep("FP", names(solTrainX))],predTrainX)
solTestTransX <- cbind(solTestX[,grep("FP", names(solTestX))],predTestX)
skewness(solTrainXtrans$NumAromaticBonds)
skewness(solTrainTransX$NumAromaticBonds)
folds = createFolds(solTrainY, k = 5, returnTrain = TRUE)
ctrl_folds = trainControl(method = "cv", index = folds, number = 5)
lmTrain = train(x = solTrainTransX,y = solTrainY, method = "lm", trControl = ctrl_folds, preProcess = c("BoxCox"))
lmTrain
lmTest = train(x = solTestTransX, y = solTestY, method = "lm", trControl = ctrl_folds, preProcess = c("BoxCox"))
lmTest
correlated1 = findCorrelation(cor(solTrainTransX), .9)
correlated2 = findCorrelation(cor(solTestTransX), .9)
filteredTrainX <- solTrainTransX[,-correlated1]
filteredTestX <- solTestTransX[,-correlated2]
lmTrainTune <- train(x = filteredTrainX, y = solTrainY, method = "lm", trControl = ctrl_folds)
lmTrainTune
rsq <- function (x, y) cor(x, y) ^ 2
pred_ = predict(lmTrainTune,solTestXtrans)
postResample(solTestY,pred_)
lmTrainTune$resample
resultados = data.frame('Observed' = solTestY, 'Model' = pred_)
resultados
pls_ = train(x = solTrainTransX, y = solTrainY, method = "pls", trControl = ctrl_folds)
